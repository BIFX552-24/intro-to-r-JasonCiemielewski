---
title: "Data Structures"
format: html
editor: visual
---

The exercises in this document follow along closely with [Lesson 4](https://swcarpentry.github.io/r-novice-gapminder/04-data-structures-part1.html) of [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), provided by the [Software Carpentry](https://software-carpentry.org/) community under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see [The Carpentries](https://carpentries.org/).

::: callout-tip
## Key Points

-   Use read.csv to read tabular data in R.
-   The basic data types in R are double, integer, complex, logical, and character.
-   Data structures such as data frames or matrices are built on top of lists and vectors, with some added attributes.
:::

#### Challenge 1

An important part of every data analysis is cleaning the input data. If you know that the input data is all of the same format, (e.g. numbers), your analysis is much easier! Clean the cat data set from the chapter about type coercion.

Use the starter code provided here and complete the tasks below.

<!-- Challenge 1 answer begin -->

```{r}
# Read data (make sure you are in the correct working directory here!)
cats <- read.csv("data/feline-data_v2.csv")

# 1. Print the data
cats

# 2. Show an overview of the table with all data types
str(cats)

# 3. The "weight" column has the incorrect data type ## chr ##.
#    The correct data type is: ## double ##

# 4. Correct the 4th weight data point with the mean of the two given values
cats$weight[4] <- 2.35

#    print the data again to see the effect
cats

# 5. Convert the weight to the right data type
cats$weight <-as.numeric(cats$weight)

#    Calculate the mean to test yourself
mean(cats$weight)

# If you see the correct mean value (and not NA), you did the exercise
# correctly!
```

<!-- Challenge 1 answer end -->

#### Challenge 2

Make a vector with the numbers 1 through 26 (save this vector to the variable `x`). Then, multiply the vector by 2.

<!-- Challenge 2 answer begin -->

```{r}
x <- 1:26
x * 2
```

<!-- Challenge 2 answer end -->

#### Challenge 3

What is the data type of the names of `mean_male_height`? You can find out using the `str()` or `typeof()` functions.

<!-- Challenge 3 answer begin -->

```{r}
mean_male_height <- c(age20_39 = 176.1, age40_59 = 175.8, age60_plus = 173.4)
str(mean_male_height) #the names are a chr data types
```

`the names of mean_male_height are chr data type`

<!-- Challenge 3 answer end -->

#### Challenge 4

Instead of just changing some of the names a vector/list already has, you can also set all names of an object by writing code like (replace ALL CAPS text):

```         
names( OBJECT ) <-  CHARACTER_VECTOR
```

Create a vector that gives the number for each letter in the alphabet! R has a built-in object called `LETTERS`. It is a 26-character vector, from A to Z.

<!-- Challenge 4 answer begin -->

```{r}
# Generate a vector called letter_no with the sequence of numbers from 1 to 26!
letter_no <- 1:26

# Set the names of the number sequence to the 26 letters in `LETTERS`.
names(letter_no) <- LETTERS

# Test yourself by calling `letter_no["B"]`, which should give you the number 2!
letter_no["B"]
```

<!-- Challenge 4 answer end -->

#### Challenge 5

There are several subtly different ways to call variables, observations and elements from `data.frames`. Try out these examples and explain what is returned by each one. *Hint*: Use the function `typeof()` to examine what is returned in each case.

<!-- Challenge 5 answer begin -->

```{r}
cats[1]
```

`cats[1]` subsets the first column/vector (coat) in the list cats and returns this subset as a list/dataframe.

```{r}
cats[[1]]
```

`cats[[1]]` extracts all the elements (rows/observations) of the first column/vector (variable "coat") in the list cats. The returned output is a character vector of the elements with their names attribute dropped.

```{r}
cats$coat
```

`cats$coat` extracts the elements of the vector with the names attribute coat and returns the elements without their names attribute as a character vector.

```{r}
cats["coat"]
```

`cats["coat"]` subsets the vector of elements with the names attribute "coat" and returns the subset as a list that retains the names attribute for the elements

```{r}
cats[1, 1]
```

`cats[1, 1]` extracts the first row (observation) of the first column (variable) and returns the element without their names attribute as a character vector.

```{r}
cats[, 1]
```

`cats[, 1]` extracts all row elements of the first column/vector and returns the elements without name attributes, which produces a character vector instead of a list.

```{r}
cats[1, ]
```

`cats[1, ]` extracts the first element (observation) of every column/variable vector and returns the element(s) as a list that retains the names attribute

<!-- Challenge 5 answer end -->

#### Challenge 6

Given `matrix_example`,

```{r}
matrix_example <- matrix(0, ncol=6, nrow=3)
```

what do you think will be the result of `length(matrix_example)`? Try it. Were you right? Why / why not?

<!-- Challenge 6 answer begin -->

I think the length will be 18.\
\
My guess was correct. The function `matrix(0, ncol=6, nrow=3)` recycled numeric 0 as the element for each index of the matrix.

<!-- Challenge 6 answer end -->

#### Challenge 7

Make another matrix, this time containing the numbers 1:50, with 5 columns and 10 rows. Did the matrix function fill your matrix by column, or by row, as its default behavior? See if you can figure out how to change this. (hint: read the documentation for matrix!)

<!-- Challenge 7 answer begin -->

```{r}
# using matrix with default `matrix` parameters
## your command goes here
mChallenge7 <- matrix(1:50, ncol = 5, nrow = 10)

#The matrix function filled the matrix by columns as a default behavior (byrow = FALSE is default)

# modify the previous command to fill in the opposite order as above
## your command goes here
mChallenge7b <- matrix(1:50, ncol = 5, nrow = 10,
                        byrow = TRUE)
```

<!-- Challenge 7 answer end -->

#### Challenge 8

Create a list of length two containing a character vector for each of the sections in this part of the workshop:

-   Data types
-   Data structures

Populate each character vector with the names of the data types and data structures we've seen so far.

<!-- Challenge 8 answer begin -->

```{r}
## you command goes here
data_types <- c("logical", "integer", "double", "complex", "character")
data_structures <- c("vector", "data frame", "list", "matrix")
list_challenge8_names <- list(data_types = data_types, 
                              data_structures = data_structures)
list_challenge8_names

## Using list(data_types, data_structures) returns a list of vectors that does not have a names attribute.

#list_challenge8 <- list(data_types, data_structures)
#list_challenge8
#attributes(list_challenge8)
#str(list_challenge8)
```

<!-- Challenge 8 answer end -->

#### Challenge 9

Consider the R output of the matrix below:

```         
     [,1] [,2]
[1,]    4    1
[2,]    9    5
[3,]   10    7
```

What was the command that generated this output? Examine each command and try to figure out the correct one before typing them. Think about what matrices the other commands will produce.

1.  `matrix(c(4, 1, 9, 5, 10, 7), nrow = 3)`
2.  `matrix(c(4, 9, 10, 1, 5, 7), ncol = 2, byrow = TRUE)`
3.  `matrix(c(4, 9, 10, 1, 5, 7), nrow = 2)`
4.  `matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)`

<!-- Challenge 9 answer begin -->

```{r}
# your codmmand goes here

matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)
```

<!-- Challenge 9 answer end -->
