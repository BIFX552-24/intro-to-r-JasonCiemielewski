---
title: "Joining Tables"
format: html
editor: visual
---

The exercises in this document follow along closely with the [Joining tables](https://uclouvain-cbio.github.io/WSBIM1207/sec-join.html) chapter of [Introduction to Bioinformatics](https://uclouvain-cbio.github.io/WSBIM1207/index.html), under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see:

> Laurent Gatto, Kevin Missault, Manon Martin & Axelle Loriot. (2021, September 24). UCLouvain-CBIO/WSBIM1207: Introduction to bioinformatics (Version v2.0.0). Zenodo. DOI: [10.5281/zenodo.5532658](https://doi.org/10.5281/zenodo.5532658).

<!-- see also https://github.com/UCLouvain-CBIO/WSBIM1207/blob/47465271c0ffc4eac5dd476779a1e5a759a6922e/50-joining-tables.Rmd for the exact version referred to here -->

::: callout-tip
## Key Points

-   Join tables of data in R
:::

```{r}
#| include: false
if(FALSE)
{
    # use this code to install the package we're using for this lesson
    BiocManager::install("UCLouvain-CBIO/rWSBIM1207")
}
library("rWSBIM1207")
data(jdf)

library(dplyr)
```

#### Challenge 1

Using the `full_join` function, join tables `jdf4` and `jdf5`. What has happened for observations `P26039` and `P02468`?

<!-- Challenge 1 answer begin -->

```{r}
jdf4_5_full_join <- full_join(jdf4, jdf5)
# view(jdf4)
# view(jdf5)
# view(jdf4_5_full_join)
```

`c full_join(jdf4, jdf5)` joins tables jdf4 and jdf5 by column/variable "uniprot". `c colnames(jdf4)` and `c colnames(jdf5)` show "uniprot" as the only shared variable. Observation `c P26039` originally comes from table `c jdf4`, which only has the variables "uniprot", "orgenelle" and "entry". `c P26039` displays `c NA` as the value for the new variables provided by `c jdf5` during the full_join. The same effect is observed for `c P02468` with regards for the new variables provided by table `c jdf4` ("gene.name", "description", and "organism") with `c NA` being used for `c P02468` with the new variables after the join.

<!-- Challenge 1 answer end -->

#### Challenge 2

Join tables `jdf4` and `jdf5`, keeping only observations in `jdf4`.

<!-- Challenge 2 answer begin -->

```{r}
(left_join(jdf4, jdf5))
```

<!-- Challenge 2 answer end -->

#### Challenge 3

Join tables `jdf4` and `jdf5`, keeping only observations in `jdf5`.

<!-- Challenge 3 answer begin -->

```{r}
# Insert code here
(right_join(jdf4, jdf5))
```

<!-- Challenge 3 answer end -->

#### Challenge 4

Join tables `jdf4` and `jdf5`, keeping observations observed in both tables.

<!-- Challenge 4 answer begin -->

```{r}
(inner_join(jdf4, jdf5))
```

<!-- Challenge 4 answer end -->

#### Challenge 5

Given the inner join,

```{r}
inner_join(jdf6, jdf7)
```

interpret the result, where both tables have duplicated keys.

<!-- Challenge 5 answer begin -->

`c inner_join(jdf6, jdf7)` creates a tibble with 4 rows for the same uniprot number. `c Q99PL5` is repeated twice in both tables `c jdf6` and `c jdf7`. `c inner_join()` recognizes the uniprot ID in both tables and attempts to join them based on the matching uniprot IDs; however, `c inner_join` does not handle the isoform matching due to the column names not having the same explicit name.

`c inner_join(jdf6, jdf7, by = c("uniprot" = "uniprot", "isoform" = "isoform_num"))`

will perform an inner join without creating incorrect entries.

<!-- Challenge 5 answer end -->
