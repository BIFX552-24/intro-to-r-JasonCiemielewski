---
title: "Vectorization"
format: html
editor: visual
---

The exercises in this document follow along closely with [Lesson 9](https://swcarpentry.github.io/r-novice-gapminder/09-vectorization.html) of [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), provided by the [Software Carpentry](https://software-carpentry.org/) community under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see [The Carpentries](https://carpentries.org/).

::: callout-tip
## Key Points

-   Use vectroized options instead of loops
:::

```{r}
library(gapminder)
data(gapminder)

library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())

library(magrittr)
```

#### Challenge 1

Make a new column in the `gapminder` data frame that contains population in units of millions of people. Check the head or tail of the data frame to make sure it worked.

<!-- Challenge 1 answer begin -->

```{r}
gapminder$pop_mil <- gapminder$pop / 1e6
head(gapminder)
```

<!-- Challenge 1 answer end -->

#### Challenge 2a

On a single graph, plot population, in millions, against year, for all countries. Do not worry about identifying which country is which.

<!-- Challenge 2a answer begin -->

```{r}
# your code goes here
ggplot(data = gapminder, mapping = aes(x = year, y = pop_mil)) +
  geom_point()
```

<!-- Challenge 2a answer end -->

#### Challenge 2b

Repeat the exercise, graphing only for China, India, and Indonesia. Again, do not worry about which is which.

<!-- Challenge 2b answer begin -->

```{r}
# One way to subset and plot the selected countries
# chinaIndiaIndo <- gapminder[
#   gapminder$country == "China" | 
#   gapminder$country == "India" |
#   gapminder$country == "Indonesia",]
# ggplot(data = chinaIndiaIndo, mapping = aes(x = year, y = pop_mil)) +
#   geom_point()

#for statement way to subset and plot the selected countries
# countries <- c("China", "India", "Indonesia")
# iCountries <- c()
# for (i in countries) {
#   iCountries_tmp <- gapminder[gapminder$country == i, ]
#   iCountries <- rbind(iCountries, iCountries_tmp)
# }
# iCountries
# ggplot(data = iCountries, mapping = aes(x = year, y = pop_mil)) +
#   geom_point()

#piping subsetted data directly into ggplot
gapminder[gapminder$country %in% c('China', 'India', 'Indonesia'), ] %>%
  ggplot(mapping = aes(x = year, y = pop_mil)) +
  geom_point()
```

<!-- Challenge 2b answer end -->

#### Challenge 3

Given the following matrix:

```{r}
m <- matrix(1:12, nrow=3, ncol=4)
m
```

Write down what you think will happen when you run:

-   `m ^ -1`
-   `m * c(1, 0, -1)`
-   `m > c(0, 20)`
-   `m * c(1, 0, -1, 2)`

Did you get the output you expected? If not and the video didn't clear things up, let me know and we can discuss.

<!-- Challenge 3 answer begin -->

`m^-1` raised each element of m to -1

`m * c(1, 0, -1)`

results in the vector being recycled as the i th element in the vector is multiplied by the ith element in the matrix.

`m > c(0, 20)` results in a matrix output of logical values as the i th value of the vector is compared to the i th value of the matrix to determine if the i th value of the vector is greater than the i th value of the matrix.

`m * c(1, 0, -1, 2)` results in the 4 element vector being recycled to multiply the i th element in the vector by the i th element in the matrix.

<!-- Challenge 3 answer end -->

#### Challenge 4a

We're interested in looking at the sum of the following sequence of fractions:

```         
x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)
```

This would be tedious to type out, and impossible for high values of $n$. Use vectorization to compute $x$ when $n=100$.

<!-- Challenge 4a answer begin -->

```{r}
# your code goes here

1/((1:100)^2)
```

<!-- Challenge 4a answer end -->

#### Challenge 4b

What is the sum when $n=10,000$?

<!-- Challenge 4b answer begin -->

```{r}
# your code goes here
sum(1/((1:1e5)^2))

#we can also set n = 1e5
#n <- 1e5
#sum(1/(1:n)^2)
```

<!-- Challenge 4b answer end -->
