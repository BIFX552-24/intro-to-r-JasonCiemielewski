---
title: "Exploring Data Frames"
format: html
editor: visual
---

The exercises in this document follow along closely with [Lesson 5](https://swcarpentry.github.io/r-novice-gapminder/05-data-structures-part2.html) of [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), provided by the [Software Carpentry](https://software-carpentry.org/) community under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see [The Carpentries](https://carpentries.org/).

::: callout-tip
## Key Points

-   Use `cbind()` to add a new column to a data frame.
-   Use `rbind()` to add a new row to a data frame.
-   Remove rows from a data frame.
-   Use `na.omit()` to remove rows from a data frame with NA values.
-   Use `levels()` and `as.character()` to explore and manipulate factors.
-   Use `str()`, `summary()`, `nrow()`, `ncol()`, `dim()`, `colnames()`, `rownames()`, `head()`, and `typeof()` to understand the structure of a data frame.
-   Read in a csv file using `read.csv()`.
-   Understand what `length()` of a data frame represents.
:::

#### Challenge 1

Let's imagine that 1 cat year is equivalent to 7 human years.

1.  Create a vector called `human_age` by multiplying `cats$age` by 7.
2.  Convert `human_age` to a factor.
3.  Convert `human_age` back to a numeric vector using the `as.numeric()` function. Now divide it by 7 to get the original ages back. Explain what happened.

<!-- Challenge 1 answer begin -->

```{r}
# load cats data (make sure you are in the correct working directory)
cats <- read.csv('../04-Data-Structures/data/feline-data_v2.csv')
cats$weight[4] <- 2.35
cats$weight <- as.numeric(cats$weight)
cats$age <- c(2,3,5,1)

# create human_age
human_age <- cats$age * 7

# convert human_age to a factor
human_age <- as.factor(human_age)

# convert human_age back to a numeric vector
human_age <- as.numeric(human_age)

#human_age <- human_age / 7

##  human_age_original <- cats$age * 7
##  human_age == human_age_original
```

Explanation: ...

`human_age <- as.numeric(as.factor(human_age))` does not return the original values for the numeric elements

`human_age <- cats$age * 7` creates a vector equal in length to `cats$age` with each row element from cats\$age multiplied by 7 and used as the row element for human_age vector. The data type remains double. `human_age <- as.factor(human_age)` coerces `human_age` from a vector of double data type to a factor data structure with character data type in levels (and those levels represented with a integar value), with each converted unique character element from cats\$ages becoming an orderless factor, sorted by increasing order of the converted unique character elements. `human_age <- as.numeric(human_age)` coerces the human_age factor data structure into a numeric vector; however, each element in the factor data structure is coerced into the underlaying integer value from the levels assignment and not from the original value prior to character conversion.

The original values of `human_age <- cats$age * 7` are 14, 21, 35, 7.

after coercing into factor, `human_age <- as.factor(human_age)`, human_age is now a factor with 4 levels "7", "14", "21", "35" having the underlaying integer representatives of 1, 2, 3, 4.

The original value, prior to converting to factor, for `human_age[1]` is 14. Coercing human_age to a factor changes human_age\[1\] from a double type 14 to a "14 represented by an underlying integer value 2. This underlying integer value is the value used for coercing the factor into a numeric form. The original value of 14 becomes 2 after as.numeric(as.factor(human_age)) coercion.

\`

<!-- Challenge 1 answer end -->

#### Challenge 2

You can create a new data frame right from within R with the following syntax:

```{r}
df <- data.frame(id = c("a", "b", "c"),
                 x = 1:3,
                 y = c(TRUE, TRUE, FALSE))
```

Make a data frame that holds the following information for yourself:

-   first name
-   last name
-   lucky number

Then use `rbind` to add an entry for someone you work with. Finally, use `cbind` to add a column with each person's answer to the question, "Is it time for coffee break?"

<!-- Challenge 2 answer begin -->

```{r}
# create people
people <- data.frame(first_name = "jason",
                     last_name = "ciemielewski",
                     lucky_number = 13)

# add a team member
people <- rbind(people, list("boaty", "mcboatface", 12))

# add coffee break
people <- cbind(people, coffee_break = c(TRUE, FALSE))
people
```

\
<!-- Challenge 2 answer end -->

#### Challenge 3

It's good practice to also check the last few lines of your data and some in the middle. How would you do this?

Searching for observations specifically in the middle isn't too hard, but we could ask for a few lines at random. How would you code this?

<!-- Challenge 3 answer begin -->

```{r}
library(gapminder)
data(gapminder)

# your commands go here
str(gapminder)
summary(gapminder)
head(gapminder)
tail(gapminder)


gapminder[sample(nrow(gapminder), 5), ] #this efficient code came specifically from swcarpentry, the cited source from earlier.



```

<!-- Challenge 3 answer end -->

#### Challenge 4

Go to file -\> new file -\> R script, and write an R script to load in the gapminder dataset. Put it in the `scripts/` directory and add it to version control.

Run the script using the `source` function, using the file path as its argument.

<!-- Challenge 4 answer begin -->

```{r}
# load gapminder by sourcing your script here
source('../05-Exploring-Data-Frames/scripts/load_gapminder_data.r')

```

<!-- Challenge 4 answer end -->

#### Challenge 5

Read the output of `str(gapminder)` again; this time, use what you've learned about factors, lists and vectors, as well as the output of functions like `colnames` and `dim` to explain what everything that `str` prints out for `gapminder` means.

```{r}
str(gapminder)
```

<!-- Challenge 5 answer begin -->

Explain the output of `str(gapminder)` here.

`str(gapminder)` shows that gapminder is a tibble (a data frame from tiddyverse) has 1,704 rows of observations (lists of elements) for 6 named variables (column vectors). `str(gapminder)` also shows the names for each column vector, as well as the data type, length, and a few of the first elements in each column.

<!-- Challenge 5 answer end -->
